---
// Astro组件的前端部分（frontmatter）
// 这里可以放置导入语句和服务器端代码
// import { ViewTransitions } from "astro:transitions";
import Nav from "../components/nav.astro";
---

<!doctype html>
<html lang="zh">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Khalil Fong</title>
    <!-- <ViewTransitions /> -->
    <style is:global>
      ::-webkit-scrollbar {
        display: none;
      }

      body {
        background-color: #000;
        font-family: "system-ui,Segoe UI,Roboto,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji";
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      img {
        width: 100%;
        height: 100%;
        object-fit: cover;
      }

      h1 {
        font-weight: lighter;
        font-size: 58px;
      }

      p,
      a {
        text-decoration: none;
        text-transform: uppercase;
        font-size: 14px;
        font-weight: lighter;
        color: #000;
        transition: color 0.3s;
      }

      nav {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        padding: 2em;
        display: flex;
        justify-content: space-between;
      }

      .nav-items {
        position: fixed;
        top: 2em;
        left: 40%;
        display: flex;
        gap: 0.25em;
      }

      nav a,
      .nav-items a {
        text-transform: none;
      }

      .whitespace.w-1 {
        width: 100vw;
        height: 50vh;
      }

      .whitespace.w-2 {
        width: 100vw;
        height: 45vh;
      }

      .gallery {
        position: relative;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 20em;
      }

      .project {
        position: relative;
        width: 100vw;
        height: 100vh;
        display: flex;
      }

      .index {
        flex: 1;
        padding-left: 2em;
        height: 0;
      }

      .images {
        flex: 6;
        display: flex;
        flex-direction: column;
        gap: 1em;
        height: 100vh;
      }

      .img {
        /* flex: 1; */
        width: 200px;
        background-color: #fff;
        overflow: hidden;
      }

      .img img {
        opacity: 0.9;
        background-color: #000;
      }

      .index .mask {
        position: absolute;
        top: 0;
        left: 2em;
        height: 70px;
        overflow: hidden;
        will-change: transform;
      }

      .index .mask h1 {
        color: #fff;
        position: relative;
        will-change: transform;
      }

      .index .mask h1 span {
        position: relative;
        display: inline-block;
        will-change: transform;
      }

      .digit-wrapper,
      .digit-wrapper span {
        display: inline-block;
        position: relative;
        will-change: transform;
      }

      .project-names {
        position: fixed;
        width: 245px;
        top: 50vh;
        left: 40%;
        transform: translateX(0%);
      }

      .project-names span {
        display: inline-block;
        width: 90px;
        font-weight: lighter;
        font-family: monospace;
      }

      .indicator {
        position: absolute;
        top: 0;
        right: 0;
        width: 18px;
        height: 18px;
        display: flex;
        justify-content: center;
        align-items: center;
        will-change: transform;
      }

      .symbol {
        width: 12px;
        height: 12px;
        background-color: #fff;
        clip-path: polygon(0 50%, 100% 100%, 100% 0);
      }

      .name {
        height: 24px;
      }

      .name p {
        color: rgba(255, 255, 255, 0.5);
      }

      .name.active p {
        color: #fff;
      }

      .preview-img {
        position: fixed;
        bottom: 2em;
        right: 2em;
        max-width: 40vw;
        height: calc(45vh - 2em);
        opacity: 0.9;
      }

      .progress-bar {
        position: fixed;
        top: 0;
        right: 0;
        width: 8px;
        height: 100vh;
        background-color: #fff;
        transform-origin: top;
        transform: scaleY(0);
      }

      .song-list-container {
        position: fixed;
        top: 15vh;
        right: 2em;
        width: 40vw;
        max-height: 40vh;
        overflow: hidden;
        z-index: 10;
      }

      .song-list {
        position: relative;
        width: 100%;
        display: none;
        opacity: 0;
        /* justify-content: flex-end; */
      }

      .song-list.active {
        display: flex;
        opacity: 1;
      }

      .song-list h3 {
        font-weight: lighter;
        font-size: 20px;
        line-height: 20px;
        margin-bottom: 0.5em;
        margin-right: 1em;
        width: 80px;
        color: #fff;
      }

      .song-list ul {
        list-style: none;
      }

      .song-list li {
        font-size: 14px;
        font-weight: lighter;
        margin-bottom: 0.5em;
        color: #fff;
      }

      .footer p {
        position: fixed;
        bottom: 2em;
        left: 40%;
        text-transform: none;
      }

      /* 响应式布局调整 */
      @media (max-width: 768px) {
        .mobile-mask {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background-color: rgba(0, 0, 0, 0.6);
        }
        .song-list h3 {
          font-size: 16px;
          font-weight: lighter;
        }

        .song-list li {
          font-size: 12px;
          font-weight: lighter;
        }

        h1 {
          font-size: 40px;
        }

        nav {
          padding: 1em;
        }

        .nav-items {
          left: 0;
          right: 0;
          margin-left: auto;
          margin-right: auto;
          width: fit-content;
          transform: none;
          top: 1em;
        }

        .whitespace.w-1 {
          height: 30vh;
        }

        .whitespace.w-2 {
          height: 25vh;
        }

        .gallery {
          gap: 10em;
        }

        .project {
          flex-direction: column;
          height: auto !important;
        }

        .index {
          padding-left: 1em;
          margin-bottom: 1em;
          height: 70px;
        }

        .images {
          height: auto;
        }

        .img {
          width: 90vw;
          margin: 0 auto;
        }

        .project-names {
          position: fixed;
          width: 90vw;
          left: 0;
          right: 0;
          margin-left: auto;
          margin-right: auto;
          top: 8vh;
          bottom: auto;
          transform: none;
        }

        .project-names p {
          font-size: 12px;
        }

        .song-list-container {
          width: 90vw;
          left: 0;
          right: 0;
          margin-left: auto;
          margin-right: auto;
          top: auto;
          bottom: 0;
          height: 35vh;
          transform: none;
        }

        .preview-img {
          width: 50vw;
          height: 50vw;
          max-width: 50vw;
          left: 0;
          right: 0;
          margin-left: auto;
          margin-right: auto;
          top: 36vh;
          transform: none;
        }

        .indicator {
          right: auto;
          left: -24px;
        }
      }

      /* 更小屏幕的额外调整 */
      @media (max-width: 480px) {
        h1 {
          font-size: 32px;
        }

        .gallery {
          gap: 8em;
        }

        .preview-img {
          width: 60vw;
          height: 60vw;
          max-width: 60vw;
          bottom: 15vh;
        }
      }
    </style>
  </head>
  <body>
    <Nav />
    <div class="whitespace w-1"></div>

    <div class="gallery">
      <div class="project">
        <div class="index">
          <div class="mask"><h1>01</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>02</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>03</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>04</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>05</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>06</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>07</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>08</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>09</h1></div>
        </div>
        <div class="images"></div>
      </div>
      <div class="project">
        <div class="index">
          <div class="mask"><h1>10</h1></div>
        </div>
        <div class="images"></div>
      </div>
    </div>

    <div class="whitespace w-2"></div>
    <div class="mobile-mask"></div>
    <div class="project-names">
      <div class="indicator">
        <div class="symbol"></div>
      </div>
      <div class="name active"><p><span>2024-10-18</span> 梦想家</p></div>
      <div class="name"><p><span>2016-09-28</span> JTW 西游记</p></div>
      <div class="name"><p><span>2014-04-11</span> 危险世界</p></div>
      <div class="name"><p><span>2012-12-12</span> 回到未来</p></div>
      <div class="name"><p><span>2011-04-21</span> 15</p></div>
      <div class="name"><p><span>2009-08-11</span> Timeless 可啦思刻</p></div>
      <div class="name"><p><span>2008-12-19</span> 橙月</p></div>
      <div class="name"><p><span>2007-12-28</span> 未来</p></div>
      <div class="name"><p><span>2006-12-29</span> 爱爱爱</p></div>
      <div class="name"><p><span>2005-11-16</span> Soulboy</p></div>
    </div>

    <div class="song-list-container">
      <div class="song-list active" data-project="0">
        <ul>
          <li>XZMHXDXH</li>
          <li>江湖中人</li>
          <li>GF</li>
          <li>Tango</li>
          <li>才二十三</li>
          <li>谁知爱是什么</li>
          <li>我不是农人</li>
          <li>那沙漠里的水</li>
          <li>回留</li>
          <li>没啥好说</li>
        </ul>
      </div>
      <div class="song-list" data-project="1">
        <h3>BLACK</h3>
        <ul>
          <li>悟空</li>
          <li>Flow</li>
          <li>听</li>
          <li>味道</li>
          <li>RingFinger</li>
          <li>NMW</li>
          <li>笑开</li>
          <li>梦蝴蝶</li>
          <li>Love You so Much</li>
          <li>醉</li>
          <li>悟空2003demo（bonus track）</li>
        </ul>
        <h3>GOLD</h3>
        <ul>
          <li>All Night</li>
          <li>Right Girl</li>
          <li>Run From Your Love</li>
          <li>烦</li>
          <li>Once</li>
          <li>无所谓</li>
          <li>黑夜</li>
          <li>很不低调</li>
          <li>放不过自己</li>
          <li>As I Do</li>
        </ul>
      </div>
      <div class="song-list" data-project="2">
        <h3></h3>

        <ul>
          <li>Welcome</li>
          <li>危险世界</li>
          <li>Peace (Feat. Tia Ray 袁娅维)</li>
          <li>黑白灰</li>
          <li>桃花运</li>
          <li>特别的人</li>
          <li>Weather Report</li>
          <li>天气先生</li>
          <li>枫叶做的风铃</li>
          <li>Boarding</li>
        </ul>
        <h3></h3>
        <ul>
          <li>巴黎</li>
          <li>爱不来 (feat. Miss Ko葛仲珊)</li>
          <li>僵尸</li>
          <li>Lights Up</li>
        </ul>
      </div>
      <div class="song-list" data-project="3">
        <h3></h3>

        <ul>
          <li>Can You Feel The Music</li>
          <li>I Want You Back</li>
          <li>你就是</li>
          <li>千纸鹤</li>
          <li>关于爱的定义</li>
          <li>麦恩莉</li>
          <li>孤独孩儿</li>
          <li>Romeo</li>
          <li>妈妈说</li>
          <li>爱立刻</li>
        </ul>
        <h3></h3>
        <ul>
          <li>BB88</li>
        </ul>
      </div>
      <div class="song-list" data-project="4">
        <h3></h3>

        <ul>
          <li>Gotta Make A Change</li>
          <li>昙花</li>
          <li>张永成 - [feat. Ghost Style]</li>
          <li>因为你</li>
          <li>情胜策略</li>
          <li>无菇朋友</li>
          <li>自以为（feat. 徐佳莹）</li>
          <li>二人游</li>
          <li>Over</li>
          <li>Take Me</li>
        </ul>
        <h3></h3>

        <ul>
          <li>好不容易</li>
          <li>Over Reprise</li>
        </ul>
      </div>
      <div class="song-list" data-project="5">
        <h3></h3>

        <ul>
          <li>You are the sunshine of my life</li>
          <li>Nothing's gonna change my love for you</li>
          <li>Bad</li>
          <li>La Bamba</li>
          <li>红豆</li>
          <li>Georgia on my mind</li>
          <li>记得</li>
          <li>Wonderful tonight</li>
          <li>Moon river</li>
        </ul>
      </div>
      <div class="song-list" data-project="6">
        <h3></h3>

        <ul>
          <li>Singalongsong</li>
          <li>小小虫</li>
          <li>1234567</li>
          <li>黑白</li>
          <li>如果爱</li>
          <li>黑洞里</li>
          <li>三人游</li>
          <li>每个人都会</li>
          <li>一百种表情</li>
          <li>爱我吧</li>
        </ul>
        <h3></h3>
        <ul>
          <li>为你写的歌</li>
          <li>Orange Moon - Hidden Track</li>
        </ul>
      </div>
      <div class="song-list" data-project="7">
        <h3></h3>

        <ul>
          <li>Love Song</li>
          <li>够不够</li>
          <li>暖</li>
          <li>爱在</li>
          <li>公园</li>
          <li>简单最浪漫</li>
          <li>十九八七</li>
          <li>未来</li>
          <li>忘了美丽</li>
          <li>sorry</li>
        </ul>
        <h3></h3>
        <ul>
          <li>为你写的歌</li>
          <li>爱爱爱（Acoustic Version）</li>
        </ul>
      </div>
      <div class="song-list" data-project="8">
        <h3></h3>

        <ul>
          <li>爱爱爱</li>
          <li>苏丽珍</li>
          <li>歌手与模特儿</li>
          <li>唉！</li>
          <li>四人游</li>
          <li>手拖手</li>
          <li>偷笑</li>
          <li>Goodbye Melody Rose</li>
          <li>诗人的情人</li>
          <li>拖男带女</li>
        </ul>
        <h3></h3>
        <ul>
          <li>Love Outrolude - Instrumental</li>
          <li>If You Leave Me Now</li>
          <li>春风吹之吹吹风 mix</li>
        </ul>
      </div>
      <div class="song-list" data-project="9">
        <h3></h3>
        <ul>
          <li>Prologue</li>
          <li>妹妹</li>
          <li>春风吹</li>
          <li>每天每天</li>
          <li>女人</li>
          <li>叫我怎么说</li>
          <li>哪怕</li>
          <li>南音</li>
          <li>我们能不能</li>
          <li>跳</li>
        </ul>
        <h3></h3>
        <ul>
          <li>总结</li>
          <li>赶场</li>
          <li>等着你回来</li>
          <li>认识你</li>
        </ul>
      </div>
    </div>

    <div class="preview-img">
      <img alt="" />
    </div>

    <div class="progress-bar"></div>

    <!-- 使用Astro的客户端脚本标签 -->
    <script>
      // 导入GSAP和Lenis库
      import { gsap } from "gsap";
      import { ScrollTrigger } from "gsap/ScrollTrigger";
      import Lenis from "lenis";

      gsap.registerPlugin(ScrollTrigger);

      document.addEventListener("DOMContentLoaded", () => {
        try {
          gsap.registerPlugin(ScrollTrigger);

          // 初始化滚动处理器
          const lenis = new Lenis();
          lenis.on("scroll", ScrollTrigger.update);
          gsap.ticker.add((time) => {
            lenis.raf(time * 750);
          });
          gsap.ticker.lagSmoothing(0);

          // 检测设备类型并相应调整动画
          const isMobile = window.innerWidth <= 768;

          function setupInitialAnimations() {
            // 在手机端调整延迟时间和动画持续时间
            const activeSongList = document.querySelector(".song-list.active");
            if (activeSongList) {
              gsap.set(activeSongList, { opacity: 0, y: 20 });
              gsap.to(activeSongList, {
                opacity: 1, 
                y: 0,
                duration: isMobile ? 0.7 : 1,
                delay: isMobile ? 0.3 : 0.5,
                ease: "power2.out"
              });
            }
            
            // 为项目名称列表添加渐入动画
            const projectNames = document.querySelector(".project-names");
            if (projectNames) {
              const nameItems = projectNames.querySelectorAll(".name");
              gsap.set(projectNames, { opacity: 0 });
              gsap.set(nameItems, { opacity: 0, x: -20 });
              
              // 先显示容器
              gsap.to(projectNames, {
                opacity: 1,
                duration: 0.5,
                delay: 0.3,
                ease: "power2.out"
              });
              
              // 然后依次显示每个项目名称
              gsap.to(nameItems, {
                opacity: 1,
                x: 0,
                stagger: 0.05,
                duration: 0.5,
                delay: 0.5,
                ease: "power2.out"
              });
            }
          }

          // 辅助函数
          function splitTextIntoSpans(selector) {
            const elements = document.querySelectorAll(selector);
            elements.forEach((element) => {
              const [firstDigit, secondDigit] = element.innerText;
              element.innerHTML = `
          <div class="digit-wrapper">
            <span class="first">${firstDigit}</span><span class="second">${secondDigit}</span>
          </div>
        `;
            });
          }

          function populateGallery() {
            const imagesContainers = document.querySelectorAll(".images");
            const projectsData = [
              {
                name: "项目1",
                images: [
                  "https://r2.khalil-fong.com/assets/project1/img1.jpg",
                  "https://r2.khalil-fong.com/assets/project1/img2.jpg",
                  "https://r2.khalil-fong.com/assets/project1/img3.jpg",
                  "https://r2.khalil-fong.com/assets/project1/img4.jpg",
                  "https://r2.khalil-fong.com/assets/project1/img5.jpg",
                  "https://r2.khalil-fong.com/assets/project1/img6.jpg",
                ],
              },
              {
                name: "项目2",
                images: [
                  "https://r2.khalil-fong.com/assets/project2/img1.jpg",
                  "https://r2.khalil-fong.com/assets/project2/img2.jpg",
                  "https://r2.khalil-fong.com/assets/project2/img3.jpg",
                  "https://r2.khalil-fong.com/assets/project2/img4.jpg",
                ],
              },
              {
                name: "项目3",
                images: [
                  "https://r2.khalil-fong.com/assets/project3/img1.jpg",
                ],
              },
              {
                name: "项目4",
                images: [
                  "https://r2.khalil-fong.com/assets/project4/img1.jpg",
                ],
              },
              {
                name: "项目5",
                images: [
                  "https://r2.khalil-fong.com/assets/project5/img1.jpg",
                ],
              },
              {
                name: "项目6",
                images: [
                  "https://r2.khalil-fong.com/assets/project6/img1.jpg",
                ],
              },
              {
                name: "项目7",
                images: [
                  "https://r2.khalil-fong.com/assets/project7/img1.jpg",
                ],
              },
              {
                name: "项目8",
                images: [
                  "https://r2.khalil-fong.com/assets/project8/img1.jpg",
                ],
              },
              {
                name: "项目9",
                images: [
                  "https://r2.khalil-fong.com/assets/project9/img1.jpg",
                ],
              },
              {
                name: "项目10",
                images: [
                  "https://r2.khalil-fong.com/assets/project10/img1.jpg",
                ],
              },
              // 根据需要添加更多项目
            ];

            // 在手机端减少图片之间的间距
            const imageGap = isMobile ? 10 : 20;

            imagesContainers.forEach((container, projectIndex) => {
              if (projectIndex >= projectsData.length) return;

              const projectImages = projectsData[projectIndex].images;
              projectImages.forEach((imagePath, imgIndex) => {
                const imgContainer = document.createElement("div");
                imgContainer.classList.add("img");
                
                // 初始化时设置为不可见
                gsap.set(imgContainer, { opacity: 0, y: 30 });

                // 根据图片内容动态调整高度
                imgContainer.style.height = "auto";

                const img = document.createElement("img");
                img.src = imagePath;
                img.alt = `${projectsData[projectIndex].name} 图片`;
                imgContainer.appendChild(img);

                container.appendChild(imgContainer);
                
                // 添加渐入动画，带有延迟以创建序列效果
                gsap.to(imgContainer, {
                  opacity: 1,
                  y: 0,
                  duration: 0.8,
                  delay: 0.1 * imgIndex + 0.3 * projectIndex,
                  ease: "power2.out"
                });
              });

              // 在手机端计算不同的高度
              const totalHeight = isMobile ? 
                projectImages.length * 150 + (projectImages.length - 1) * imageGap :
                projectImages.length * 200 + (projectImages.length - 1) * imageGap;
              // 找到当前项目容器并设置高度
              const projectContainer = container.closest(".project");
              if (projectContainer) {
                projectContainer.style.height = `${totalHeight}px`;
              }
            });
          }

          // 分割文本并填充画廊
          splitTextIntoSpans(".mask h1");
          populateGallery();
          
          // 添加初始动画
          setupInitialAnimations();

          // 进度条
          ScrollTrigger.create({
            trigger: "body",
            start: "top top",
            end: "bottom bottom",
            onUpdate: (self) => {
              gsap.set(".progress-bar", { scaleY: self.progress });
            },
          });

          // 根据居中的.img元素更新预览图片
          const previewImg = document.querySelector(".preview-img img");
          const previewContainer = document.querySelector(".preview-img");
          const imgElements = document.querySelectorAll(".img img");

          // 设置初始预览图片为第一个图片元素
          if (imgElements.length > 0 && previewImg) {
            previewImg.src = imgElements[0].src;
            // 初始预览图片的淡入动画
            gsap.fromTo(previewContainer, 
              { opacity: 0, y: 20 }, 
              { opacity: 1, y: 0, duration: 0.8, ease: "power2.out" }
            );
          }

          // 辅助函数：使用动画更新预览图片
          function updatePreviewWithAnimation(newSrc) {
            if (!previewImg || previewImg.src === newSrc) return;
            
            // 先淡出
            gsap.to(previewContainer, {
              opacity: 0, 
              y: 10, 
              duration: 0.3, 
              ease: "power2.in",
              onComplete: () => {
                // 更新图片源
                previewImg.src = newSrc;
                
                // 图片加载完成后淡入
                previewImg.onload = () => {
                  gsap.to(previewContainer, {
                    opacity: 1, 
                    y: 0, 
                    duration: 0.5, 
                    ease: "power2.out"
                  });
                };
                
                // 防止图片已缓存的情况
                if (previewImg.complete) {
                  gsap.to(previewContainer, {
                    opacity: 1, 
                    y: 0, 
                    duration: 0.5, 
                    ease: "power2.out"
                  });
                }
              }
            });
          }

          imgElements.forEach((img) => {
            ScrollTrigger.create({
              trigger: img,
              start: "top 50%",
              end: "bottom 50%",
              onEnter: () => updatePreviewWithAnimation(img.src),
              onEnterBack: () => updatePreviewWithAnimation(img.src),
            });
          });

          // 指示器移动和项目名称激活
          const indicator = document.querySelector(".indicator");
          const indicatorStep = 24;
          const names = gsap.utils.toArray(".name");
          const songLists = gsap.utils.toArray(".song-list");
          gsap.set(".indicator", { top: "0px" });

          const projects = gsap.utils.toArray(".project");
          projects.forEach((project, index) => {
            ScrollTrigger.create({
              trigger: project,
              start: "top 50%",
              end: "bottom 50%",
              onEnter: () => {
                gsap.to(indicator, {
                  top: Math.max(0, index * indicatorStep) + "px",
                  duration: 0.3,
                  ease: "power2.out",
                });

                names.forEach((name, i) =>
                  name.classList.toggle("active", i === index),
                );

                // 同步切换歌曲列表
                songLists.forEach((songList, i) => {
                  const isActive = i === index;
                  songList.classList.toggle("active", isActive);

                  if (isActive) {
                    gsap.fromTo(
                      songList,
                      { y: 20, opacity: 0 },
                      { y: 0, opacity: 1, duration: 0.75, ease: "power2.out" },
                    );
                  }
                });
              },
              onLeaveBack: () => {
                const targetPosition =
                  index - 1 < 0 ? 0 : (index - 1) * indicatorStep;
                gsap.to(indicator, {
                  top: targetPosition + "px",
                  duration: 0.3,
                  ease: "power2.out",
                });

                const prevIndex = index - 1 < 0 ? 0 : index - 1;
                names.forEach((name, i) =>
                  name.classList.toggle("active", i === prevIndex),
                );

                // 同步切换歌曲列表（向后滚动时）
                songLists.forEach((songList, i) => {
                  const isActive = i === prevIndex;
                  songList.classList.toggle("active", isActive);

                  if (isActive) {
                    gsap.fromTo(
                      songList,
                      { y: -20, opacity: 0 },
                      { y: 0, opacity: 1, duration: 0.75, ease: "power2.out" },
                    );
                  }
                });
              },
            });
          });
          // Track scroll velocity
          let activeIndex = -1;
          let scrollVelocity = 0;
          // 遮罩动画
          projects.forEach((project, i) => {
            const mask = project.querySelector(".mask");
            const digitWrapper = project.querySelector(".digit-wrapper");
            const firstDigit = project.querySelector(".first");
            const secondDigit = project.querySelector(".second");

            gsap.set([mask, digitWrapper, firstDigit, secondDigit], { y: 0 });
            gsap.set(mask, { position: "absolute", top: 0 });

            ScrollTrigger.create({
              trigger: project,
              start: "top bottom",
              end: "bottom top",
              anticipatePin: 1,
              fastScrollEnd: true,
              preventOverlaps: true,
              onUpdate: (self) => {
                const projectRect = project.getBoundingClientRect();
                const windowCenter = window.innerHeight / 2;
                const nextProject = projects[i + 1];
                const velocityAdjustment = Math.min(scrollVelocity * 0.1, 100);
                const pushPoint =
                  window.innerHeight *
                  (0.85 + velocityAdjustment / window.innerHeight);

                if (projectRect.top <= windowCenter) {
                  if (!mask.isFixed) {
                    mask.isFixed = true;
                    gsap.set(mask, { position: "fixed", top: "50vh" });
                  }

                  if (nextProject) {
                    const nextRect = nextProject.getBoundingClientRect();

                    if (nextRect.top <= pushPoint && activeIndex !== i + 1) {
                      gsap.killTweensOf([
                        mask,
                        digitWrapper,
                        firstDigit,
                        secondDigit,
                      ]);

                      activeIndex = i + 1;
                      gsap.to(mask, {
                        y: -80,
                        duration: 0.3,
                        ease: "power2.out",
                        overwrite: true,
                      });
                      gsap.to(digitWrapper, {
                        y: -80,
                        duration: 0.5,
                        delay: 0.5,
                        ease: "power2.out",
                        overwrite: true,
                      });
                      gsap.to(firstDigit, {
                        y: -80,
                        duration: 0.75,
                        ease: "power2.out",
                        overwrite: true,
                      });
                      gsap.to(secondDigit, {
                        y: -80,
                        duration: 0.75,
                        delay: 0.1,
                        ease: "power2.out",
                        overwrite: true,
                      });
                    }
                  }
                } else {
                  mask.isFixed = false;
                  gsap.set(mask, { position: "absolute", top: 0 });
                }

                if (self.direction === -1 && projectRect.top > windowCenter) {
                  mask.isFixed = false;
                  gsap.set(mask, { position: "absolute", top: 0 });

                  if (i > 0 && activeIndex === i) {
                    const prevProject = projects[i - 1];
                    if (prevProject) {
                      const prevMask = prevProject.querySelector(".mask");
                      const prevWrapper =
                        prevProject.querySelector(".digit-wrapper");
                      const prevFirst = prevProject.querySelector(".first");
                      const prevSecond = prevProject.querySelector(".second");

                      gsap.killTweensOf([
                        prevMask,
                        prevWrapper,
                        prevFirst,
                        prevSecond,
                      ]);

                      activeIndex = i - 1;
                      gsap.to([prevMask, prevWrapper], {
                        y: 0,
                        duration: 0.3,
                        ease: "power2.out",
                        overwrite: true,
                      });
                      gsap.to(prevFirst, {
                        y: 0,
                        duration: 0.75,
                        ease: "power2.out",
                        overwrite: true,
                      });
                      gsap.to(prevSecond, {
                        y: 0,
                        duration: 0.75,
                        delay: 0.1,
                        ease: "power2.out",
                        overwrite: true,
                      });
                    }
                  }
                }
              },
            });
          });

          // 在scroll触发器初始化后添加项目切换时的图片动画
          function setupProjectImageAnimations() {
            const projects = gsap.utils.toArray(".project");
            
            projects.forEach((project) => {
              const images = project.querySelectorAll(".img");
              
              ScrollTrigger.create({
                trigger: project,
                start: "top 70%",
                onEnter: () => {
                  gsap.to(images, {
                    opacity: 1,
                    y: 0,
                    duration: 0.8,
                    stagger: 0.1,
                    ease: "power2.out",
                    overwrite: true
                  });
                },
                onLeaveBack: () => {
                  gsap.to(images, {
                    opacity: 0.7,
                    y: 20,
                    duration: 0.5,
                    stagger: 0.05,
                    ease: "power2.in",
                    overwrite: true
                  });
                }
              });
            });
          }

          setupProjectImageAnimations();

          // 为移动设备添加方向检测和滚动优化
          if (isMobile) {
            window.addEventListener('resize', () => {
              ScrollTrigger.refresh();
            });
            
            // 为移动设备优化滚动性能
            lenis.options.smoothWheel = false;
          }
        } catch (error) {
          console.error(error);
          location.reload();
        }
      });
    </script>
  </body>
</html>
